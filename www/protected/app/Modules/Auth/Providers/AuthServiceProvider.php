<?php
namespace App\Modules\Auth\Providers;

use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\View;
use Caffeinated\Modules\Support\ServiceProvider;
use Illuminate\Support\Facades\Validator;
use App\Modules\Auth\Models\User;
use Illuminate\Support\Facades\Hash;
use App\Modules\Auth\Services\EmailService;

class AuthServiceProvider extends ServiceProvider
{

    /**
     * Register the User module service provider.
     *
     * This service provider is a convenient place to register your modules
     * services in the IoC container. If you wish, you may make additional
     * methods or service providers to keep the code more focused and granular.
     *
     * @return void
     */
    public function register()
    {
        App::register('App\Modules\Auth\Providers\RouteServiceProvider');

        Lang::addNamespace('auth', realpath(__DIR__ . '/../Resources/Lang'));
        View::addNamespace('auth', realpath(__DIR__ . '/../Resources/Views'));
    }

    /**
     * Bootstrap the application events.
     *
     * Here you may register any additional middleware provided with your
     * module with the following addMiddleware() method. You may pass in
     * either an array or a string.
     *
     * @return void
     */
    public function boot()
    {
        // binding services to service container
        $this->app->singleton('App\Modules\Auth\Services\EmailService', function () {
            return new EmailService();
        });

        // define customized validation
        Validator::extend('current_password', function ($attribute, $value, $parameters, $validator) {
            $model = User::find($parameters[0]);
            if (! empty($model) && Hash::check($value, $model->password)) {
                return true;
            }

            return false;
        });

        // define customized validation message, see ../Resource/Lang/en/validation.php
        Validator::replacer('current_password', function ($message, $attribute, $rule, $parameters) {
            if ($message == 'validation.current_password') {
                $message = trans('auth::validation.current_password');
                return str_replace(':attribute', $attribute, $message);
            } else {
                return $message;
            }
        });
    }

    /**
     * Additional Compiled Module Classes
     *
     * Here you may specify additional classes to include in the compiled file
     * generated by the `artisan optimize` command. These should be classes
     * that are included on basically every request into the application.
     *
     * @return array
     */
    public static function compiles()
    {
        $basePath = realpath(__DIR__ . '/../');

        return [];
    }
}
